{
  "structures": [
    {
      "name": "Array",
      "content": "# Array\n  \n​\n## Introduction\n  \n​\nAn array is a collection of elements identified by index or key values. It's one of the most fundamental data structures in computer science, where each element can be accessed directly by its index. Imagine a row of numbered lockers, where each locker can hold a value and you can access any locker directly by knowing its number.  \n​\n  \n​\n## Use Cases\n  \n​\n- Arrays are highly useful in situations where the data to be stored is of fixed size or the size is well known in advance.  \n​\n- They are commonly used when you need to keep track of a list of items, and the order in which they are stored matters.  \n​\n- Not suitable for scenarios where the size of data is dynamic or unknown in advance, a Linked List or Dynamic Array might be a better choice in such cases.  \n​\n  \n​\n## Operations\n  \n​\n- **Access:** *O(1)* - Accessing an element in an array is a constant time operation as you can access any element directly by its index.  \n​\n- **Insertion:** *O(n)* - Insertion in an array requires shifting of elements, hence it takes linear time.  \n​\n- **Deletion:** *O(n)* - Similar to insertion, deletion also requires shifting of elements.  \n​\n- **Search:** *O(n)* - In the worst case, you may have to traverse the entire array to find an element.  \n​\n  \n​\n## Implementation\n  \n​\n### Access: *O(1)*\n  \n​\n```plaintext  \n​\nfunction accessArray(array, index):  \n​\n    return array[index]  \n​\n```  \n​\n  \n​\nAccessing an element in an array is straightforward. You simply specify the index of the element you want to access.  \n​\n  \n​\n### Insertion: *O(n)*\n  \n​\n```plaintext  \n​\nfunction insertArray(array, index, value):  \n​\n    // Shift all elements to the right of the index one position to the right  \n​\n    for i from array.length - 1 to index:  \n​\n        array[i + 1] = array[i]  \n​\n    // Place the new value at the specified index  \n​\n    array[index] = value  \n​\n```  \n​\n  \n​\nInsertion in an array involves two steps. First, all elements to the right of the specified index are shifted one position to the right to make room for the new element. Then, the new element is placed at the specified index.  \n​\n  \n​\n### Deletion: *O(n)*\n  \n​\n```plaintext  \n​\nfunction deleteArray(array, index):  \n​\n    // Shift all elements to the right of the index one position to the left  \n​\n    for i from index to array.length - 2:  \n​\n        array[i] = array[i + 1]  \n​\n    // Decrease the length of the array by 1  \n​\n    array.length = array.length - 1  \n​\n```  \n​\n  \n​\nDeletion in an array also involves shifting of elements. All elements to the right of the specified index are shifted one position to the left to fill the gap left by the deleted element. The length of the array is then decreased by 1.  \n​\n  \n​\n### Search: *O(n)*\n  \n​\n```plaintext  \n​\nfunction searchArray(array, value):  \n​\n    for i from 0 to array.length - 1:  \n​\n        if array[i] == value:  \n​\n            return i  // Return the index of the found element  \n​\n    return -1  // Return -1 if the element is not found  \n​\n```  \n​\n  \n​\nSearching in an array involves traversing the array from the beginning to the end and checking each element to see if it matches the desired value.  \n​\n  \n​\n## Problems\n  \n​\n### LeetCode\n  \n​\n- **[Permutations](https://leetcode.com/problems/permutations/)**: Given an array `nums` of distinct integers, return all the possible permutations.  \n​\n  \n​\n- **[Sort an Array](https://leetcode.com/problems/sort-an-array/)**: Given an array of integers `nums`, sort the array in ascending order without using any built-in functions.  \n​\n  \n​\n- **[Maximum Subarray](https://leetcode.com/problems/maximum-subarray/)**: Find the subarray with the largest sum from given integer array `nums`.  \n​\n  \n​\n- **[3Sum](https://leetcode.com/problems/3sum/)**: Given an integer array `nums`, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j, i != k, and j != k`.  \n​\n  \n​\n- **[Majority Element](https://leetcode.com/problems/majority-element/)**: Given an array `nums` of size `n`, return the majority element which is the element that appears more than ⌊n / 2⌋ times.  \n​\n  \n​\n### HackerRank\n  \n​\n- **[Arrays - DS](https://www.hackerrank.com/challenges/arrays-ds/problem)**: Reverse an array of integers.  \n​\n  \n​\n- **[Simple Array Sum](https://www.hackerrank.com/challenges/simple-array-sum/problem)**: Given an array of integers, find the sum of its elements.  \n​\n  \n​\n- **[Larry's Array](https://www.hackerrank.com/challenges/larrys-array/problem)**: Given a permutation of a sequence of natural numbers as an array, determine whether the array can be sorted using a specific operation.  \n​\n  \n​\n- **[Circular Array Rotation](https://www.hackerrank.com/challenges/circular-array-rotation/problem)**: Perform a number of right circular rotations on an array and return the values of the elements at the given indices.  \n​\n  \n​\nThese problems will help you grasp different aspects of array manipulations and are great for interview preparation.  \n​",
      "id": 1
    }
  ]
}